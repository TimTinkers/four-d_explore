#version 310 es
// Compute shader:
// Takes in a time value, a view projection, a number of vertices, a number of
// meshes, and a buffer of mesh center coordinates.
// Populates a buffer of output vertices to render.
layout(local_size_x = N_MESHES_X, local_size_y = N_MESHES_Y) in;

// A uniform value representing the time.
// layout(set = 0, binding = 0) uniform timeUniform { float time; };

// The view projection.
layout(set = 0, binding = 0) uniform viewProjUniform {
  mat4 main_mat;
  vec4 column;
  vec4 row;
  float ww;
} viewProj;

// The input mesh center coordinates.
layout(set = 1, binding = 0) buffer inputCenterCoordinates {
  vec4 inputMeshCenters[N_MESHES];
};

// The output buffer to populate with mesh output points.
layout(set = 1, binding = 1) buffer outputVertices {
  vec4 data[N_MESHES * N_VERTICES];
  float w[N_MESHES * N_VERTICES];
} outputMeshVertices;

// The actual computation.
void main() {
  // Every thread generates a mesh.
  int current_invocation_id = (int(gl_GlobalInvocationID.x) % 1024) + (int(gl_GlobalInvocationID.y) * 1024);
  if (current_invocation_id >= N_MESHES) {
    return;
  }

  // Get the center of this mesh.
  vec4 centerPosition = inputMeshCenters[current_invocation_id];

  // Generate the offsets needed for the Tesseract geometry.
  vec4[16] geometry;
  geometry[ 0] = vec4(-0.5, -0.5, -0.5, -0.5);
  geometry[ 1] = vec4(0.5, -0.5, -0.5, -0.5);
  geometry[ 2] = vec4(-0.5, 0.5, -0.5, -0.5);
  geometry[ 3] = vec4(-0.5, -0.5, -0.5, 0.5);
  geometry[ 4] = vec4(0.5, 0.5, -0.5, -0.5);
  geometry[ 5] = vec4(-0.5, 0.5, -0.5, 0.5);
  geometry[ 6] = vec4(0.5, -0.5, -0.5, 0.5);
  geometry[ 7] = vec4(0.5, 0.5, -0.5, 0.5);
  geometry[ 8] = vec4(-0.5, -0.5, 0.5, -0.5);
  geometry[ 9] = vec4(0.5, -0.5, 0.5, -0.5);
  geometry[10] = vec4(-0.5, 0.5, 0.5, -0.5);
  geometry[11] = vec4(-0.5, -0.5, 0.5, 0.5);
  geometry[12] = vec4(0.5, 0.5, 0.5, -0.5);
  geometry[13] = vec4(-0.5, 0.5, 0.5, 0.5);
  geometry[14] = vec4(0.5, -0.5, 0.5, 0.5);
  geometry[15] = vec4(0.5, 0.5, 0.5, 0.5);

  vec4[16] geoOut;
  for (int i = 0; i < 16; ++i) {
    vec4 inputPosition = centerPosition + geometry[i];
    geoOut[i] = viewProj.main_mat * inputPosition + viewProj.column;
    float w = abs(dot(viewProj.row, inputPosition) + viewProj.ww);
    geoOut[i] = geoOut[i] / vec4(w);
    geoOut[i].zw = geoOut[i].wz;
    if (geoOut[i].z > 1.0) {
      geoOut[i].z = -1.0;
    }
  }

  // Generate and transform mesh points around this center.
  // If the number of vertices per mesh corresponds to a wireframe, generate
  // that.
  // Otherwise output full triangles for a closed figure.
  if (N_VERTICES == 64) {

	// Organize the edges into line pairs.
    int[32][2] edges;

    // First cube.
    edges[ 0] = int[2]( 8, 11);
	edges[ 1] = int[2](11, 13);
	edges[ 2] = int[2](13, 10);
	edges[ 3] = int[2](10,  8);
	edges[ 4] = int[2]( 8,  9);
	edges[ 5] = int[2](10, 12);
	edges[ 6] = int[2](13, 15);
	edges[ 7] = int[2](11, 14);
	edges[ 8] = int[2](14, 15);
	edges[ 9] = int[2](15, 12);
	edges[10] = int[2](12,  9);
	edges[11] = int[2]( 9, 14);

    // Second cube.
    edges[12] = int[2](0, 3);
	edges[13] = int[2](3, 5);
	edges[14] = int[2](5, 2);
	edges[15] = int[2](2, 0);
	edges[16] = int[2](0, 1);
	edges[17] = int[2](2, 4);
	edges[18] = int[2](5, 7);
	edges[19] = int[2](3, 6);
	edges[20] = int[2](6, 7);
	edges[21] = int[2](7, 4);
	edges[22] = int[2](4, 1);
	edges[23] = int[2](1, 6);

    // Linking edges.
    edges[24] = int[2]( 8, 0);
	edges[25] = int[2]( 9, 1);
	edges[26] = int[2](10, 2);
	edges[27] = int[2](11, 3);
	edges[28] = int[2](12, 4);
	edges[29] = int[2](13, 5);
	edges[30] = int[2](14, 6);
	edges[31] = int[2](15, 7);

    // Iterate through each arrangement and insert the two points representing
    // the edge endpoints.
    for (int i = 0; i < 32; i++) {
      int[2] edge = edges[i];
      for (int j = 0; j < 2; j++) {
        int geometryIndex = edge[j];
        outputMeshVertices
            .data[current_invocation_id * N_VERTICES + (i * 2) + j] =
            geoOut[geometryIndex];
      }
    }        
  } else {

    // Organize the faces into triangle pairs.
    int[24][6] faces;

    // First cube.
    faces[0] = int[6](0, 1, 4, 0, 4, 2);
    faces[1] = int[6](0, 3, 5, 0, 5, 2);
    faces[2] = int[6](1, 6, 7, 1, 7, 4);
    faces[3] = int[6](0, 1, 6, 0, 6, 3);
    faces[4] = int[6](2, 5, 7, 2, 7, 4);
    faces[5] = int[6](3, 6, 7, 3, 7, 5);

    // Second cube.
    faces[6] = int[6](8, 9, 12, 8, 12, 10);
    faces[7] = int[6](8, 11, 13, 8, 13, 10);
    faces[8] = int[6](9, 14, 15, 9, 15, 12);
    faces[9] = int[6](8, 9, 14, 8, 14, 11);
    faces[10] = int[6](10, 13, 15, 10, 15, 12);
    faces[11] = int[6](11, 14, 15, 11, 15, 13);

    // Linking faces.
    faces[12] = int[6](0, 1, 9, 0, 9, 8);
    faces[13] = int[6](0, 2, 10, 0, 10, 8);
    faces[14] = int[6](0, 3, 11, 0, 11, 8);
    faces[15] = int[6](1, 4, 12, 1, 12, 9);
    faces[16] = int[6](1, 6, 14, 1, 14, 9);
    faces[17] = int[6](2, 4, 12, 2, 12, 10);
    faces[18] = int[6](2, 5, 13, 2, 13, 10);
    faces[19] = int[6](3, 5, 13, 3, 13, 11);
    faces[20] = int[6](3, 7, 15, 3, 15, 11);
    faces[21] = int[6](4, 7, 15, 4, 15, 12);
    faces[22] = int[6](5, 7, 15, 5, 15, 13);
    faces[23] = int[6](6, 7, 15, 6, 15, 14);

    // Iterate through each arrangement and insert the six points representing
    // the two triangles.
    for (int i = 0; i < 24; i++) {
      int[6] face = faces[i];
      for (int j = 0; j < 6; j++) {
        int geometryIndex = face[j];
        outputMeshVertices
            .data[current_invocation_id * N_VERTICES + (i * 6) + j] =
            geoOut[geometryIndex];
      }
    }
  }
}
