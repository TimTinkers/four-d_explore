#version 310 es
// Compute shader:
// Takes in a time value, time offset values, and a number of vertices.
// Populates a buffer of output vertices to complete the sine waves.

layout(local_size_x = N_VERTICES) in;

// A uniform value representing the time.
//layout(set = 0, binding = 0) uniform timeUniform { float time; };

layout(set = 0, binding = 0) uniform viewProjUniform {
  mat4 main_mat;
  vec4 column;
  vec4 row;
  float ww;
} viewProj;

// The input cube vertices.
layout(set = 1, binding = 0) buffer inputCubeVertices {
  vec4 inputMeshVertices[N_VERTICES];
};

// The output buffer to populate with mesh output points.
layout(set = 1, binding = 1) buffer outputCubeVertices {
  vec4 data[N_VERTICES];
} outputMeshVertices;


// The actual computation.
void main() {
  int current_invocation_id = int(gl_GlobalInvocationID.x);
  if (current_invocation_id >= N_VERTICES) {
    return;
  }

  // This assumes that inputMeshVertices only contains points, no directions.
  vec4 inputPosition = inputMeshVertices[current_invocation_id];
  vec4 outputPosition = viewProj.main_mat * inputPosition + viewProj.column;
  float w = dot(viewProj.row, inputPosition) + viewProj.ww;
  //outputPosition = outputPosition / vec4(w);

  outputPosition.z = outputPosition.w;
  outputPosition.w = w;
  // if (outputPosition.z < 0.0) outputPosition.z *= -1.0;

  outputMeshVertices.data[current_invocation_id] = outputPosition;
}
