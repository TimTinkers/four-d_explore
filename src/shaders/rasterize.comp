#version 430
#extension GL_ARB_separate_shader_objects : enable

struct primitive {
  vec4 positions[4];
};

layout(set = 0, binding = 0) uniform Dimensions {
  int width;
  int height;
  int akth;
} dim;

layout(binding = 1, rgba8) uniform image2D output_image;
layout(binding = 2, r32f) uniform image2D depth_buffer;
layout(binding = 3, r32i) uniform iimage2D depth_mutex;

layout(set = 1, binding = 4) buffer InputPrimitives {
  primitive prims[];
} inputPrims;

// Barycentric math for tetrahedra
// Mostly taken with modification from Project4 rasterizeTools.h
float calculateSignedVolume(vec4 tet[4]) {
  return (dot(vec3(tet[0])-vec3(tet[3]),
              cross(vec3(tet[1])-vec3(tet[3]),
                    vec3(tet[2])-vec3(tet[3]))))
          /6;
}

float calculateBarycentricCoordinateValue(vec3 a, vec3 b, vec3 c, vec3 d,
                                          vec4 tet[4]) {
  vec4 baryTet[4];
  baryTet[0] = vec4(a, 0);
  baryTet[1] = vec4(b, 0);
  baryTet[2] = vec4(c, 0);
  baryTet[3] = vec4(d, 0);
  return calculateSignedVolume(baryTet) / calculateSignedVolume(tet);
}

vec4 calculateBarycentricCoordinate(vec4 tet[4], vec3 point) {
  float beta = calculateBarycentricCoordinateValue(
      vec3(tet[0]), point, vec3(tet[2]), vec3(tet[3]), tet);
  float gamma = calculateBarycentricCoordinateValue(
      vec3(tet[0]), vec3(tet[1]), point, vec3(tet[3]), tet);
  float delta = calculateBarycentricCoordinateValue(
      vec3(tet[0]), vec3(tet[1]), vec3(tet[2]), point, tet);
  float alpha = 1.0 - beta - gamma - delta;
  return vec4(alpha, beta, gamma, delta);
}

bool isBarycentricCoordInBounds(vec4 bCoord) {
  return bCoord[0] >= 0.0 && bCoord[0] <= 1.0 &&
         bCoord[1] >= 0.0 && bCoord[1] <= 1.0 &&
         bCoord[2] >= 0.0 && bCoord[2] <= 1.0 &&
         bCoord[3] >= 0.0 && bCoord[3] <= 1.0;
}

float getZAtCoordinate(vec4 bCoord, vec4 tet[4]) {
  return -(bCoord[0] * tet[0][3] +
           bCoord[1] * tet[1][3] +
           bCoord[2] * tet[2][3] +
           bCoord[3] * tet[3][3]);
}

// END OF BARYCENTRIC MATH

void main() {
  uint index = gl_GlobalInvocationID.x;

  primitive prim = inputPrims.prims[index];
  vec4 p0 = prim.positions[0];
  vec4 p1 = prim.positions[1];
  vec4 p2 = prim.positions[2];
  vec4 p3 = prim.positions[3];
  vec4 tet[4] = {p0, p1, p2, p3};

  int minX = max(int(floor(min(min(min(p0[0], p1[0]), p2[0]), p3[0]))), 0);
  int minY = max(int(floor(min(min(min(p0[1], p1[1]), p2[1]), p3[1]))), 0);
  int minW = max(int(floor(min(min(min(p0[2], p1[2]), p2[2]), p3[2]))), 0);
  int maxX =
      min(int(ceil(max(max(max(p0[0], p1[0]), p2[0]), p3[0]))), dim.width);
  int maxY =
      min(int(ceil(max(max(max(p0[1], p1[1]), p2[1]), p3[1]))), dim.height);
  int maxW =
      min(int(ceil(max(max(max(p0[2], p1[2]), p2[2]), p3[2]))), dim.akth);

  for (int x = minX; x < maxX; ++x) {
    for (int y = minY; y < maxY; ++y) {
      for (int w = minW; w < maxW; ++w) {
        vec3 point = vec3(x,y,w);
        ivec2 coord = ivec2(x, y);
        vec4 bCoord = calculateBarycentricCoordinate(tet, point);
        if (isBarycentricCoordInBounds(bCoord)) {
          float depth = getZAtCoordinate(bCoord, tet);
          bool is_set;
          do {
            is_set = (imageAtomicCompSwap(depth_mutex, coord, 0, 1) == 0);
            if (depth < float(imageLoad(depth_buffer, coord))) {
              imageStore(depth_buffer, coord, vec4(depth,0,0,0));
              imageStore(output_image, coord, vec4(point,0)); // should be interpolated
            }
          } while(!is_set);
        }
      }
    }
  }
}
